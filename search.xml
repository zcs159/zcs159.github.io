<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git的基础使用</title>
    <url>/2020/05/02/Git%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>关于Git的学习，参考书目《Github入门与实践》</p>
</blockquote>
<a id="more"></a>

<h1 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h1><h2 id="git-init：初始化仓库"><a href="#git-init：初始化仓库" class="headerlink" title="git init：初始化仓库"></a>git init：初始化仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir git-tutorial 	// 在当前位置建立仓库，make directions</span><br><span class="line">$ <span class="built_in">cd</span> git-tutorial 	// 移至git-tutorial仓库</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化后生成<code>.git</code>目录，用于存储着管理当前目录内容所需的仓库数据，称作“附属于该仓库的工作树”</p>
</blockquote>
<h2 id="git-status：查看仓库的状态"><a href="#git-status：查看仓库的状态" class="headerlink" title="git status：查看仓库的状态"></a>git status：查看仓库的状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果显示当前所在master分支下，commit是指“记录工作树中所有文件的当前状态”</p>
<p>此外，通过<code>touch + 文件名.后缀名</code>可创建文件，如：<code>touch README.md</code></p>
</blockquote>
<h2 id="git-add：向暂存区中添加文件"><a href="#git-add：向暂存区中添加文件" class="headerlink" title="git add：向暂存区中添加文件"></a>git add：向暂存区中添加文件</h2><p>未使用git add命令时，文件显示在Untracked files中，使用后文件加入暂存区（提交之前的一个临时区域），使用方法<code>git add + 文件名.后缀名</code></p>
<h2 id="git-commit：保存仓库的历史记录"><a href="#git-commit：保存仓库的历史记录" class="headerlink" title="git commit：保存仓库的历史记录"></a>git commit：保存仓库的历史记录</h2><p>git commit命令可以将当前暂存区的文件实际保存到仓库的历史记录中，通过记录可在工作树中复原文件</p>
<ul>
<li>记述一行提交信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">"First commit"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>-m参数后的“First commit”称作提交信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">" </span></span><br><span class="line"><span class="string">&gt;1.xxxxx</span></span><br><span class="line"><span class="string">&gt;2.xxxxx</span></span><br><span class="line"><span class="string">&gt;"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>也可按上述方法来提交多行信息</p>
</blockquote>
<ul>
<li>记述详细提交信息</li>
</ul>
<blockquote>
<p>不加-m，直接执行git commit命令后，编译器会自启动，显示如下信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> Please enter the commit message <span class="keyword">for</span> your changes. Lines starting</span><br><span class="line"><span class="comment"># with '#' will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#       new file:   文件名.后缀名</span></span><br></pre></td></tr></table></figure>

<p>提交方式：</p>
<p>1.第一行：简要概括更改内容</p>
<p>2.第二行：空行</p>
<p>3.第三行：记述更改的原因和详细内容（#表示注释）</p>
<ul>
<li><p>终止提交：退出编译器提交终止</p>
</li>
<li><p>使用git status查看提交后的转台</p>
</li>
</ul>
<h2 id="git-log：查看提交日志"><a href="#git-log：查看提交日志" class="headerlink" title="git log：查看提交日志"></a>git log：查看提交日志</h2><p>可查看提交日志，以及什么人什么时间进行提交和和合并，以及简要的提交信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 14fe633b561ca5f5a195cd86bc663b3838fab308 (HEAD -&gt; master)</span><br><span class="line">Author: zcs159 &lt;zcs1596357@163.com&gt;</span><br><span class="line">Date:   Sat May 2 20:57:18 2020 +0800</span><br><span class="line"></span><br><span class="line">    First commit</span><br></pre></td></tr></table></figure>

<ul>
<li>只显示提交信息的第一行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=short</span><br><span class="line">commit 14fe633b561ca5f5a195cd86bc663b3838fab308 (HEAD -&gt; master)</span><br><span class="line">Author: zcs159 &lt;zcs1596357@163.com&gt;</span><br><span class="line"></span><br><span class="line">    First commit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>加上–pretty=short即可</p>
</blockquote>
<ul>
<li>只显示指定目录、文件的日志</li>
</ul>
<blockquote>
<p>git log命令后加上目录名或文件名即可</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> README.md</span><br></pre></td></tr></table></figure>

<ul>
<li>显示文件的改动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p</span><br></pre></td></tr></table></figure>

<blockquote>
<p>加上-p参数后，文件提交前后的改动便会显示，末尾可加上文件名或目录名</p>
</blockquote>
<h2 id="git-diff：查看更改前后的差别"><a href="#git-diff：查看更改前后的差别" class="headerlink" title="git diff：查看更改前后的差别"></a>git diff：查看更改前后的差别</h2><p>可以查看工作树、暂存区、最新提交之间的差别</p>
<p>例如在文件README.md中添加一行<code># Git教程</code></p>
<ul>
<li>查看工作树和暂存区的差别</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index e69de29..cc3d3b2 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+<span class="comment">#  Git教程</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于未使用git add命令向暂存区添加任何东西，所以只显示工作树与最新提交状态的之间的差别，其中“+”表示新增行，“-”表示被删除的行</p>
</blockquote>
<ul>
<li>查看工作树和最新提交的差别</li>
</ul>
<blockquote>
<p>在使用<code>git add README.md</code>后，执行git diff命令发现，工作树与暂存区无区别结果什么都不会显示，要查看最新提交的差别，执行<code>git diff HEAD</code>命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff HEAD</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index e69de29..cc3d3b2 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+<span class="comment">#  Git教程</span></span><br></pre></td></tr></table></figure>

<p><strong>建议：在执行git commit前执行git diff HEAD，查看本次提交与上次提交之间的区别，再进行git commit提交。并且可执行git log查看是否提交成功</strong></p>
<h1 id="2-分支的操作"><a href="#2-分支的操作" class="headerlink" title="2.分支的操作"></a>2.分支的操作</h1><p>从master分支创建分支如图所示，不同分支可以同时进行完全不同的作业，完成后再与默认分支master合并</p>
<img data-src="https://s1.ax1x.com/2020/05/02/Jx1swF.png" alt="Jx1swF.png" style="zoom:50%;" />

<img data-src="https://s1.ax1x.com/2020/05/02/Jx1reU.png" alt="Jx1reU.png" style="zoom:50%;" />

<h2 id="git-branch：显示分支一览表"><a href="#git-branch：显示分支一览表" class="headerlink" title="git branch：显示分支一览表"></a>git branch：显示分支一览表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>“*”表示当前所在分支</p>
</blockquote>
<ul>
<li>git checkout -b：创建、切换分支</li>
</ul>
<p>也可以直接使用<code>git branch + 新分支名</code>创建分支，在使用<code>git checkout + 分支名</code>切换分支，常用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b feature-A	// 创建feature-A,并切换到feature-A分支</span><br><span class="line">git checkout -	// 切换到上一分支</span><br></pre></td></tr></table></figure>

<h2 id="特性（Topic）分支"><a href="#特性（Topic）分支" class="headerlink" title="特性（Topic）分支"></a>特性（Topic）分支</h2><p>集中实现某一特性（主题），除此之外不进行任何作业的分支，master担任可随时发布软件的稳定分支</p>
<img data-src="https://s1.ax1x.com/2020/05/03/JxvybF.png" alt="JxvybF.png" style="zoom:50%;" />

<h2 id="git-merge：合并分支"><a href="#git-merge：合并分支" class="headerlink" title="git merge：合并分支"></a>git merge：合并分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge --no-gg feature-A</span><br></pre></td></tr></table></figure>

<blockquote>
<p>合并时先切换至master分支，再执行命令并使用<code>--no-ff</code>参数，可在历史记录中明确记录下本次分支合并，并且编译器会自启动，用于录入合并提交的信息</p>
</blockquote>
<h2 id="git-log-–graph：以图表形式查看分支"><a href="#git-log-–graph：以图表形式查看分支" class="headerlink" title="git log –graph：以图表形式查看分支"></a>git log –graph：以图表形式查看分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph</span><br><span class="line">*   commit 359bd0b86a8aa8858105bf874e661ebbf51647df (HEAD -&gt; master)</span><br><span class="line">|\  Merge: 5b0a6ff 576a4f8</span><br><span class="line">| | Author: zcs159 &lt;zcs1596357@163.com&gt;</span><br><span class="line">| | Date:   Sun May 3 09:31:10 2020 +0800</span><br><span class="line">| |</span><br><span class="line">| |     Merge branch <span class="string">'feature-A'</span></span><br><span class="line">| |</span><br><span class="line">| * commit 576a4f8494808f21afa6ccc5402f9b562de35e64 (feature-A)</span><br><span class="line">|/  Author: zcs159 &lt;zcs1596357@163.com&gt;</span><br><span class="line">|   Date:   Sun May 3 09:30:37 2020 +0800</span><br><span class="line">|</span><br><span class="line">|       Add feature-A</span><br><span class="line">|</span><br><span class="line">* commit 5b0a6ffb8bd1ba21aff89819d6bbc3b6e767a245</span><br><span class="line">  Author: zcs159 &lt;zcs1596357@163.com&gt;</span><br><span class="line">  Date:   Sun May 3 09:26:52 2020 +0800</span><br><span class="line"></span><br><span class="line">      First commit</span><br></pre></td></tr></table></figure>

<h1 id="3-更改提交的操作"><a href="#3-更改提交的操作" class="headerlink" title="3.更改提交的操作"></a>3.更改提交的操作</h1><h2 id="git-reset：回溯历史版本"><a href="#git-reset：回溯历史版本" class="headerlink" title="git reset：回溯历史版本"></a>git reset：回溯历史版本</h2><p>回溯历史版本，创建一个名为fix-B的特性分支</p>
<img data-src="https://s1.ax1x.com/2020/05/03/JxxfoQ.png" alt="JxxfoQ.png" style="zoom:50%;" />

<ul>
<li>回溯到创建feature-A分支前</li>
</ul>
<p>回溯到feature-A分支创建前，创建一个fix-B的特性分支，并让仓库的HEAD、暂存区、当前工作树回溯到指定状态，需用<code>git reset --hard + 哈希值</code>（哈希值是相应时间点或者说相应提交命令时产生的特定的值，且各不相同，<strong>哈希值输入四位以上即可</strong>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 5b0a6ffb8bd1ba21aff89819d6bbc3b6e767a245</span><br><span class="line">HEAD <span class="keyword">in</span> now at 5b0a6ff First commit</span><br></pre></td></tr></table></figure>

<ul>
<li>创建fix-B分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b fix-B	&#x2F;&#x2F; 并在README.md文件中添加内容</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m &quot;Fix-B&quot;</span><br></pre></td></tr></table></figure>

<p>下图就是当前fix-B分支的状态：</p>
<img data-src="https://s1.ax1x.com/2020/05/03/Jzpnqf.png" alt="Jzpnqf.png" style="zoom:50%;" />

<ul>
<li>推进至feature-A分支合并后的状态</li>
</ul>
<p>git log只能查看以当前状态为终点的历史日志，使用git relog命令可查看回溯历史之前的哈希值，再用git reset –hard命令恢复到历史回溯前的状态</p>
<img data-src="https://s1.ax1x.com/2020/05/03/JzpaZT.png" alt="JzpaZT.png" style="zoom:50%;" />

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line">$ git reset --hard 359bd0b</span><br><span class="line">HEAD is now at 359bd0b Merge branch <span class="string">'feature-A'</span></span><br></pre></td></tr></table></figure>

<p>回溯后：</p>
<img data-src="https://s1.ax1x.com/2020/05/03/JzpgL6.png" alt="JzpgL6.png" style="zoom:50%;" />

<ul>
<li>消除冲突</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff fix-B</span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">Recorded preimage <span class="keyword">for</span> <span class="string">'README.md'</span></span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为解决上述冲突可用编译器打开README.md文件，修改文件内容成我们想要的样子即可，再进行提交</p>
</blockquote>
<ul>
<li>git commit –amend：修改提交信息</li>
</ul>
<p>执行命令后，编译器会启动，修改提交信息成我们想要的即可</p>
<h2 id="git-rebase-i：压缩历史"><a href="#git-rebase-i：压缩历史" class="headerlink" title="git rebase -i：压缩历史"></a>git rebase -i：压缩历史</h2><p>在合并特性分支之前，如果发现已提交内容存在拼写错误等（错字漏字称为typo）</p>
<ul>
<li><p>创建一个feature-C分支，并在README.md中留下拼写等错误，再提交</p>
</li>
<li><p>修改拼写错误，用编译器打开文件进行修改，再提交，可用<code>git commit -am “Fix typo”</code>直接完成添加和提交</p>
</li>
<li><p>更改历史</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase -i HEAD~2	//选定当前分支中包含HEAD（最新提交）在内的两个最新的历史记录为对象，并在编译器中打开</span><br><span class="line">pick 7a34294 Add feature-C</span><br><span class="line">pick 6fba227 Fix typo</span><br><span class="line"><span class="comment"># Rebase 2e7db6f..6fba227 onto 2e7db6f</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup = like "squash", but discard this commit's log message</span></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>将6fba227左侧的pick部分删除改为fixup，并保存退出即可</p>
</blockquote>
<ul>
<li>合并至master分支</li>
</ul>
<h1 id="4-推送至远程仓库"><a href="#4-推送至远程仓库" class="headerlink" title="4.推送至远程仓库"></a>4.推送至远程仓库</h1><h2 id="git-remote-add：添加远程仓库"><a href="#git-remote-add：添加远程仓库" class="headerlink" title="git remote add：添加远程仓库"></a>git remote add：添加远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:zcs159/git-tutorial.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Github上创建仓库路径为“<a href="mailto:git@github.com">git@github.com</a>:用户名/仓库名.git”，origin为标识符，<strong>执行该命令后，git-tutorial就会设置为本地仓库的远程仓库</strong></p>
</blockquote>
<h2 id="git-push：推送至远程仓库"><a href="#git-push：推送至远程仓库" class="headerlink" title="git push：推送至远程仓库"></a>git push：推送至远程仓库</h2><ul>
<li>推送至master分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>推送其他分支：git push -u origin + 分支名</p>
</blockquote>
<h1 id="5-从远程仓库获取"><a href="#5-从远程仓库获取" class="headerlink" title="5.从远程仓库获取"></a>5.从远程仓库获取</h1><h2 id="git-clone：获取远程仓库"><a href="#git-clone：获取远程仓库" class="headerlink" title="git clone：获取远程仓库"></a>git clone：获取远程仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com：zcs159&#x2F;git-tutorial.git</span><br></pre></td></tr></table></figure>

<h2 id="git-pull：获取最新的远程仓库分支"><a href="#git-pull：获取最新的远程仓库分支" class="headerlink" title="git pull：获取最新的远程仓库分支"></a>git pull：获取最新的远程仓库分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull origin 分支名</span><br></pre></td></tr></table></figure>







<center>END</center>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
